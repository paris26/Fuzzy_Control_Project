% Create figure and set properties
figure('Name', 'Car Controller Test Space');
hold on;
grid on;
axis([0 10 0 4]);

% Plot obstacles (rectangles)
% First obstacle (uppefr)
x1 = [5 6 6 5];
y1 = [0 0 1 1];
fill(x1, y1, 'k');
%second obstacle
x1 = [6 7 7 6];
y1 = [0 0 2 2];
fill(x1, y1, 'k');
%third obstacle
x1 = [7 10 10 7];
y1 = [0 0 3 3];
fill(x1, y1, 'k');

'b');
text(start_pos(1)+0.1, start_pos(2), 'Start', 'Color', 'blue');% Plot start position
start_pos = [4.1, 0.3];
plot(start_pos(1), start_pos(2), 'bo', 'MarkerSize', 10, 'MarkerFaceColor', 

% Plot target position
target_pos = [10, 3.2];
plot(target_pos(1), target_pos(2), 'go', 'MarkerSize', 10, 'MarkerFaceColor', 'g');
text(target_pos(1)-0.5, target_pos(2), 'Target', 'Color', 'green');

% Set labels and title
xlabel('X (m)');
ylabel('Y (m)');
title('Car Controller Test Space');

test_points = [5.5, 0.5; 6.5, 1.5; 8, 2.5; 4, 0]; % Sample points
for i = 1:size(test_points,1)
    x = test_points(i,1);
    y = test_points(i,2);
    if isInCollision(x, y)
        fprintf('Point (%.1f, %.1f) is in collision\n', x, y);
    else
        fprintf('Point (%.1f, %.1f) is safe\n', x, y);
    end
end



% Function to check if a point is in collision with obstacles
function collision = isInCollision(x, y)
    collision = false;
    % Check first obstacle
    % first obs -> x < 5 && y >= 0 
    if (x >= 5 && x <= 6 && y >= 0 && y <= 1)
        collision = true;
    end
    %second obs -> x >= 6 && x <= 7 
    if ( x >= 6 && x <= 7 && y >= 1 && y <= 2 )
        collision = true;
    end
    % third obs -> 
     if ( x >= 7 && x <= 10 && y >= 2 && y <= 3 )
        collision = true ;
     end
end

% Optional: Function to plot car path
function plotCarPath(path_x, path_y)
    plot(path_x, path_y, 'r--', 'LineWidth', 1.5);
end
